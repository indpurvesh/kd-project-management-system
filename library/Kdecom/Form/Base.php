<?phpclass Kdecom_Form_Base extends Zend_Form {            public function __construct($options = null) {                $this->addElementPrefixPath('Kdecom_Form_Element', 'Kdecom/Form/Element');        $this->addPrefixPath('Kdecom_Form', 'KDecom/Form/');        $this->addDecorator('FormElements')                ->addDecorator('HtmlTag', array('tag' => 'div', 'class' => 'FormWrapper'))                ->addDecorator('Form');        parent::__construct($options);    }    public function init() {        $this->removeDecorator('htmlTag');        //$this->removeDecorator('htmlTag');        parent::init();    }    protected function _getAttributeModel() {        return new Application_Model_Table_Attribute();    }    protected function _getEmployeeAttributeValueModel() {        return new Application_Model_Table_EmployeeAttributeValue();    }    public function render(Zend_View_Interface $view = null) {        foreach ($this->getElements() as $element) {            if ($element->hasErrors() === true) {                $element->setAttrib('class', 'Error');            }        }        return parent::render($view);    }    public static function factory($className) {        $form = new $className;        return $form;    }    public function createElement($type, $name, $label = null, $options = null) {        $options = array_merge(array('disableLoadDefaultDecorators' => true), (array) $options);        $element = parent::createElement($type, $name, $options, $label);        $element->addDecorator('ViewHelper');        if ($type != 'hidden') {            // add space on left            $class = str_replace(' ', '', ucwords(str_replace('_', ' ', $name)));            $element->removeDecorator('DtDdWrapper')                    ->addDecorator('errors')                    ->addDecorator('label')                    ->addDecorator('HtmlTag', array('tag' => 'div',                        'class' => 'InputGroup ' . $class                    ));        }        if ($label !== null) {            $element->setLabel($label);        }        if ($type == 'file') {            $element->clearDecorators();            $element->addDecorator('label')                    ->addDecorator('file')                    ->addDecorator('HtmlTag', array(                        'tag' => 'div',                        'class' => 'InputGroup ' . $class                    ));        }        if ($type == "submit" || $type == "button") {            $element->removeDecorator('label');        }        $this->$name = $element;        return $element;    }    public function addGreyButton($name, $label = null, $options = null) {        $options = array_merge(array('disableLoadDefaultDecorators' => true), (array) $options);        $element = parent::createElement('button', $name, $options, $label);        $element->addDecorator('ViewHelper');        $class = str_replace(' ', '', ucwords(str_replace('_', ' ', $name)));        //$element->clearDecorators();        $element->removeDecorator('label')                ->addDecorator('HtmlTag', array('tag' => 'span'))                ->addDecorator(                        array('span' => 'HtmlTag'), array('tag' => 'div', 'class' => 'GreyButton ' . $class));        if ($label !== null) {            $element->setLabel($label);        }        $this->$name = $element;        return $element;    }    public function addGreySubmit($name, $label = null, $options = null) {        $options = array_merge(array('disableLoadDefaultDecorators' => true), (array) $options);        $element = parent::createElement('submit', $name, $options, $label);        $element->addDecorator('ViewHelper');        $class = str_replace(' ', '', ucwords(str_replace('_', ' ', $name)));        //$element->clearDecorators();        $element->removeDecorator('label')                ->addDecorator('HtmlTag', array('tag' => 'span'))                ->addDecorator(                        array('span' => 'HtmlTag'), array('tag' => 'div', 'class' => 'GreyButton ' . $class));        if ($label !== null) {            $element->setLabel($label);        }        $this->$name = $element;        return $element;    }    public function addAttibuteElementToGroup($belongsToId, $groupObject) {        $model = $this->_getAttributeModel();        $elements = $model->fetchAll('attribute_belongs_to = ' . intval($belongsToId));        foreach ($elements as $ele) {            if ($ele->attribute_type == 1) {                $type = "text";            }            if ($ele->attribute_type == 2) {                $type = "textarea";            }            if ($ele->attribute_type == 4) {                $type = "checkbox";            }            $this->createElement($type, $ele->unique_key_attribute, $ele->attribute_title)                    ->setBelongsTo("attribute[{$ele->id}]");            $eleName = $ele->unique_key_attribute;            $groupObject->addElement($this->$eleName);        }        return $this;    }    public function assignAttibuteElementToValue($employeeId, $belongsToId) {        if ($belongsToId == 1) {            $model = $this->_getAttributeModel();        }        if ($belongsToId == 1) {            $attributeValueModel = $this->_getEmployeeAttributeValueModel();        }        $elements = $model->fetchAll("attribute_belongs_to = " . intval($belongsToId));        foreach ($elements as $ele) {            $element = $this->getElement($ele->unique_key_attribute);            $attrValues = $attributeValueModel->fetchAll("employee_id = {$employeeId} AND attribute_id = {$ele->id}");            foreach ($attrValues as $attrValue) {                if ($element->getBelongsTo() == "attribute[$attrValue->attribute_id]") {                    $element->setValue($attrValue->attribute_value_text);                }            }        }        return $this;    }    public function addDisplayGroup(array $elements, $name, $options = null) {        parent::addDisplayGroup($elements, $name, $options);        $class = str_replace(' ', '', ucwords(str_replace('_', ' ', $name)));        $this->$name->removeDecorator('DtDdWrapper');        $this->$name->removeDecorator('htmlTag');        $this->$name->removeDecorator('fieldset');        $this->$name->addDecorator('FormElements');        $this->$name->addDecorator('HtmlTag', array(            'tag' => 'fieldset',            'class' => 'MyGroup ' . $class        ));        return $this;    }}